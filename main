#include <SFML/Graphics.hpp>
#include <iostream>
#include <ctime>
using namespace sf;

const int windowWidth = 800;
const int windowHeight = 600;
const int playerSize = 50;
const int groundHeight = 50;

class Player
{
public:
    RectangleShape shape;
    Player()
    {
        shape.setSize(Vector2f(playerSize, playerSize));
        shape.setFillColor(Color::Green);
        shape.setPosition(windowWidth / 2, windowHeight / 2);
    }
    void moveLeft()
    {
        if (shape.getPosition().x > 0)
            shape.move(-10.f, 0.f);
    }
    void moveRight()
    {
        if (shape.getPosition().x < windowWidth - playerSize)
            shape.move(10.f, 0.f);
    }
    void moveUp()
    {
        if (shape.getPosition().y > 0)
            shape.move(0.f, -10.f);
    }
    void moveDown()
    {
        if (shape.getPosition().y < windowHeight - playerSize - groundHeight)
            shape.move(0.f, 10.f);
    }
};

class Ground
{
public:
    RectangleShape shape;
    Ground()
    {
        shape.setSize(Vector2f(windowWidth, groundHeight));
        shape.setFillColor(Color::Black);
        shape.setPosition(0.f, windowHeight - groundHeight);
    }
};

class Rock
{
public:
    RectangleShape shape;
    Rock(float x)
    {
        shape.setSize(Vector2f(playerSize, playerSize));
        shape.setFillColor(Color::Red);
        shape.setPosition(x, 0.f);
    }
    void update()
    {
        shape.move(0.f, 5.f);
    }
};

int main()
{
    srand(time(NULL));
    RenderWindow window(VideoMode(windowWidth, windowHeight), "Digjam Game");
    window.setFramerateLimit(60);

    Player player;
    Ground ground;
    std::vector<Rock> rocks;

    int score = 0;
    Font font;
    if (!font.loadFromFile("arial.ttf"))
        std::cout << "Font load error!" << std::endl;
    Text scoreText;
    scoreText.setFont(font);
    scoreText.setCharacterSize(30);
    scoreText.setPosition(20.f, 20.f);

    Clock clock;
    while (window.isOpen())
    {
        Event event;
        while (window.pollEvent(event))
        {
            if (event.type == Event::Closed)
                window.close();
        }

        if (clock.getElapsedTime().asSeconds() > 1.f)
        {
            float x = (rand() % (windowWidth - playerSize));
            Rock rock(x);
            rocks.push_back(rock);
            clock.restart();
        }

        for (int i = 0; i < rocks.size(); i++)
        {
            rocks[i].update();
            if (rocks[i].shape.getPosition().y > windowHeight - groundHeight - playerSize &&
                rocks[i].shape.getPosition().x > player.shape.getPosition().x - playerSize &&
                rocks[i].shape.getPosition().x < player.shape.getPosition().x + playerSize)
            {
                window.close();
                std::cout << "Game Over! Score: " << score << std::endl;
            }
        }

        if (Keyboard::isKeyPressed(Keyboard::Left))
            player.moveLeft();
        if (Keyboard::isKeyPressed(Keyboard::Right))
            player.moveRight();
        if (Keyboard::isKeyPressed(Keyboard::Up))
            player.moveUp();
        if (Keyboard::isKeyPressed(Keyboard::Down))
            player.moveDown();

       
